{"version":3,"sources":["User.js","App.js","serviceWorker.js","index.js"],"names":["User","user","this","props","react_default","a","createElement","height","width","style","borderRadius","src","avatar","nickname","fullName","location","publicRepos","followers","Component","App","state","getUser","name","_this","refs","value","fetch","concat","then","response","json","data","setState","avatar_url","login","public_repos","className","type","ref","onClick","src_User_0","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OA0BeA,gMArBF,IACGC,EAASC,KAAKC,MAAdF,KACR,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,OAAO,KAAKC,MAAM,KAAKC,MAAO,CAACC,aAAc,OAAQC,IAAKV,EAAKW,SACpER,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAKY,UACVT,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAKa,UACVV,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAKc,UACVX,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAKe,aACVZ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAKgB,mBAjBPC,cCyCJC,6MAvCbC,MAAQ,CACNnB,KAAM,MAGRoB,QAAU,WACR,IAAMC,EAAOC,EAAKC,KAAKF,KAAKG,MAC5BC,MAAK,gCAAAC,OAAiCL,IACrCM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJR,EAAKS,SAAS,CACZ/B,KAAM,CACJW,OAAQmB,EAAKE,WACbpB,SAAUkB,EAAKG,MACfpB,SAAUiB,EAAKT,KACfP,SAAUgB,EAAKhB,SACfC,YAAae,EAAKI,aAClBlB,UAAWc,EAAKd,wFAMf,IACChB,EAASC,KAAKkB,MAAdnB,KACR,OACEG,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,UAAQ8B,UAAU,iBAChBhC,EAAAC,EAAAC,cAAA,OAAKC,OAAO,KAAKC,MAAM,KAAKG,IAAI,sEAChCP,EAAAC,EAAAC,cAAA,MAAI8B,UAAU,yBAAd,sBACAhC,EAAAC,EAAAC,cAAA,SAAO+B,KAAK,OAAOC,IAAI,OAAOF,UAAU,YACxChC,EAAAC,EAAAC,cAAA,UAAQiC,QAASrC,KAAKmB,SAAtB,qBAGFjB,EAAAC,EAAAC,cAACkC,EAAD,CAAMvC,KAAMA,YAnCFiB,aCSEuB,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,iECXNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.7f84c487.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './User.css';\r\n\r\nclass User extends Component {\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        return (\r\n            <div>\r\n                <img height=\"80\" width=\"80\" style={{borderRadius: '50%'}} src={user.avatar} />\r\n                <h2>User details: </h2>\r\n                <h3>Nickname:</h3>\r\n                <h4>{user.nickname}</h4>\r\n                <h3>Full Name:</h3>\r\n                <h4>{user.fullName}</h4>\r\n                <h3>Location:</h3>\r\n                <h4>{user.location}</h4>\r\n                <h3>Number of public repos:</h3>\r\n                <h4>{user.publicRepos}</h4>\r\n                <h3>Followers:</h3>\r\n                <h4>{user.followers}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\nimport './App.css';\nimport User from './User';\nclass App extends Component {\n\n  state = {\n    user: {}\n  }\n\n  getUser = () => {\n    const name = this.refs.name.value;\n    fetch(`https://api.github.com/users/${name}`)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        user: {\n          avatar: data.avatar_url,\n          nickname: data.login,\n          fullName: data.name,\n          location: data.location,\n          publicRepos: data.public_repos,\n          followers: data.followers\n        }\n      })\n    })\n  }\n\n  render() {\n    const { user } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"tc pv4 pv5-ns\">\n          <img height=\"32\" width=\"32\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/github.svg\" />\n          <h1 className=\"f5 f4-ns fw6 mid-gray\">Enter a username: </h1>\n          <input type=\"text\" ref=\"name\" className=\"f6 gray\"/>\n          <button onClick={this.getUser}>Get user details</button>\n        </header>\n\n        <User user={user}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}